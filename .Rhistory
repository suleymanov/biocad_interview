for (j in (i + 1):length(gfs)) {
k_jj <- kernel1(gfs[[j]], gfs[[j]], 5, mode = "undir")
if (k_ii == k_jj) { print(c(i, j)) }
}
}
source("graph_funcs2.R")
library(igraph)
set.seed(2015)
gfs <- gen_seq_graphs(15, 4, "undir", 0.5)
for (i in 1:(length(gfs) - 1)) {
k_ii <- kernel1(gfs[[i]], gfs[[i]], 5, "undir")
for (j in (i + 1):length(gfs)) {
k_jj <- kernel1(gfs[[j]], gfs[[j]], 5, "undir")
if (k_ii == k_jj) print(c(i, j))
}
}
k_11 <- kernel1(gfs[[1]], gfs[[1]], 5, "undir")
g <- direct_product(gfs[[i]], gfs[[i]], "undir")
g
px <- kronecker(gfs[[1]][[4]], gfs[[1]][[4]])
qx <- kronecker(gfs[[1]][[5]], gfs[[1]][[5]])
s <- t(qx) %*% px
val <- diag(rep(1, dim(g[[2]])[1]))
class(g)
class(g[[2]])
rm(list = ls()())
rm(list = ls())
source("graph_funcs2.R")
set.seed(2015)
gfs <- gen_seq_graphs(15, 4, "undir", 0.5)
for (i in 1:(length(gfs) - 1)) {
k_ii <- kernel1(gfs[[i]], gfs[[i]], 5, "undir")
for (j in (i + 1):length(gfs)) {
k_jj <- kernel1(gfs[[j]], gfs[[j]], 5, "undir")
}
}
for (i in 1:(length(gfs) - 1)) {}
k_ii <- kernel1(gfs[[i]], gfs[[i]], 5, "undir")
for (j in (i + 1):length(gfs)) {
k_jj <- kernel1(gfs[[j]], gfs[[j]], 5, "undir")
if (k_ii == k_jj) print(c(i, j))
}
rm(i, j, k_ii, k_jj)
print_isomorphs(gfs)
for (i in 1:(length(gfs) - 1)) {
k_ii <- kernel1(gfs[[1]], gfs[[1]], 10, "undir")
for (j in (i + 1):length(gfs)) {
k_jj <- kernel1(gfs[[j]], gfs[[j]], 10, "undir")
}
}
for (i in 1:(length(gfs) - 1)) {
k_ii <- kernel1(gfs[[i]], gfs[[i]], 10, "undir")
for (j in (i + 1):length(gfs)) {
k_jj <- kernel1(gfs[[j]], gfs[[j]], 10, "undir")
if (k_ii == k_jj) print(c(i, j))
}
}
source("Task2.R")
source("Task2.R")
source("Task2.R")
source("Task2.R")
count <- 20
n <- 20
set.seed(2015)
gfs <- gen_seq_graphs(count, n, "undir", 0.5)
gfs1 <- gen_seq_graphs(count - 15, n, "undir", 0.5)
gfs2 <- sample(gfs1, 15)
source("Task2.R")
rm(k_ii, k_jj, i, j, count)
rm(gfs1, gfs, gfs2, n)
set.seed(2015)
gfs <- gen_seq_graphs(count, n, "undir", 0.5)
print("Run standard procedure...")
print("Done standard procedure!")
print_isomorphs(gfs)
count <- 50
n <- 20
set.seed(2015)
gfs <- gen_seq_graphs(count, n, "undir", 0.5)
print("Run standard procedure...")
print("Done standard procedure!")
print_isomorphs(gfs)
par(mfrow = c(1, 2))
plot(gfs[[16]])
plot(gfs[[16]][[1]])
plot(gfs[[19]][[1]])
print_k_kernels(gfs[[16]], gfs[[19]], 10, mode = "undir")
source("graph_funcs2.R")
# count <- 1500
count <- 50
n <- 20
set.seed(2015)
gfs <- gen_seq_graphs(count, n, "undir", 0.5)
print_k_kernels(gfs[[16]], gfs[[19]], 10, "undir")
source("graph_funcs2.R")
source("graph_funcs2.R")
print_k_kernels(gfs[[16]], gfs[[19]], 10, "undir")
kronecker(gfs[[16]][[2]], gfs[[19]][[2]])
kernel1(gfs[[16]], gfs[[16]], 1, "undir")
kernel1(gfs[[16]], gfs[[19]], 1, "undir")
kernel1(gfs[[19]], gfs[[19]], 1, "undir")
print_k_kernels(gfs[[16]], gfs[[19]], 5, "undir")
print_k_kernels(gfs[[16]], gfs[[19]], 10, "undir")
g1 <- gfs[[16]]
g2 <- gfs[[19]]
for (i in 1:10) {
k11 <- kernel1(g1, g1, i, mode)
k12 <- kernel1(g1, g2, i, mode)
k22 <- kernel1(g2, g2, i, mode)
print(c(k11, k12, k22))
}
for (i in 1:10)
;
mode <- "undir"
for (i in 1:10) {
k11 <- kernel1(g1, g1, i, mode)
k12 <- kernel1(g1, g2, i, mode)
k22 <- kernel1(g2, g2, i, mode)
print(c(k11, k12, k22))
}
rm(list = ls())
dev.off()
source("graph_funcs.R")
library(igraph)
set.seed(2015)
gfs <- gen_seq_graphs(20, 4, "dir", 0.5)
p <- matrix(rep(1 / 4, 4), nrow = 4)
q <- p
g <- gfs[[1]]
plot(g[[2]])
P <- g[[1]]
P
P <- t(g[[1]])
P
rs <- colSums(P)
rs
inds <- rs != 0
P[, inds] <- P[, inds] / rs[inds]
P
P <- g[[11]]
P <- g[[1]]
P
rs <- rowSums(P)
inds <- rs != 0
P[, inds] <- t(P[inds, ] / rs[inds])
P
g[[1]]
P
s
g[[1]]
P
rs
fr <- 1 - sum(q[!inds])
fr
q[inds] <- fr * rs[inds] / sum(rs)
q
inds
P <- g[[1]]
P
rs <- colSums(P)
cs <- colSums(P)
rs <- rowSums(P)
inds <- cs != 0
P[, inds] <- t(P[inds, ] / rs[inds])
P <- g[[1]]
P[, inds] <- t(P[inds, ] / cs[inds])
fr
q[inds] <- fr * rs[inds] / sum(rs)
q
P <- g[[1]]
P
cs <- colSums(P)
cs
rs <- rowSums(P)
inds <- cs != 0
P[, inds] <- t(P[inds, ] / cs[inds])
P
P <- g[[1]]
P
cs <- colSums(P)
inds <- cs != 0
P[, inds] <- t(P[inds, ] / cs[inds])
P
P <- g[[1]]
rs <- colSums(P)
inds <- rs != 0
inds
P[, inds] <- t(P[inds, ] / rs[inds])
P
P <- g[[1]]
cs <- colSums(P)
cs
rs <- rowSums(P)
rs
inds <- rs != 0
P[, inds] <- t(P[inds, ] / rs[inds])
P
P
g[[1]]
rs
cs
rm(P, cs, fr, inds, rs)
P <- g[[1]]
rs <- rowSums(P); cs <- colSums(P)
inds_r <- rs != 0; inds_c <- cs != 0
P[, inds_r] <- t(P[inds_r, ] / rs[inds_r])
P
p
fr <- 1 - sum(q[!inds_c])
fr
q[ins_c] <- fr * cs[inds_c] / sum(cs)
q[inds_c] <- fr * cs[inds_c] / sum(cs)
q
rm(list = ls())
dev.off()
library(igraph)
source("graph_funcs2.R")
set.seed(2015)
gfs <- gen_seq_graphs(20, 4, "dir", 0.5)
print_isomorphs(gfs)
for (i in 1:(length(gfs) - 1)) {
k_ii <- kernel1(gfs[[i]], gfs[[i]], 5, mode = "dir")
for (j in (i + 1):length(gfs)) {
k_jj <- kernel1(gfs[[j]], gfs[[j]], 5, mode = "dir")
if (k_ii == k_jj) { print(c(i, j)) }
}
}
par(mfrow = c(1, 2))
plot(gfs[[1]][[1]])
plot(gfs[[16]][[1]])
gfs[[1]][[2]]
gfs[[1]][[3]]
gfs[[1]][[4]]
gfs[[1]][[5]]
gfs[[16]][[2]]
gfs[[16]][[3]]
gfs[[16]][[4]]
gfs[[16]][[5]]
q
gfs[[16]][[5]]
sum(gfs[[16]][[5]])
gfs[[16]][[5]]
adj <- gfs[[2]]
P <- adj
rs <- rowSums(P); cs <- colSums(P)
P
adj <- gfs[[16]][[2]]
adj
P <- adj
rs <- rowSums(P); cs <- colSums(P)
inds_r <- rs != 0; inds_c <- cs != 0
fr <- 1 - sum(q[!inds_c])
q <- gfs[[16]][[4]]
inds_c
fr <- 1 - sum(q[!inds_c])
fr
q[inds_c] <- fr * cs[inds_c] / sum(cs)
q
q
3/8 * 0.75
P
rs
cs
fr <- 1 - sum(q[!inds_r])
fr
inds_c
fr * cs[inds_c] / sum(cs)
fr * cs[inds_r] / sum(cs)
0.25 * 1.5
sum(fr * cs[inds_r] / sum(cs))
rm(list = ls())
dev.off()
source("graph_funcs2.R")
set.seed(2015)
gfs <- gen_seq_graphs(20, 4, "dir", 0.5)
print_isomorphs(gfs)
for (i in 1:(length(gfs) - 1)) {
k_ii <- kernel1(gfs[[i]], gfs[[i]], 5, "dir")
for (j in (i + 1):length(gfs)) {
k_jj <- kernel1(gfs[[j]], gfs[[j]], 5, "dir")
if (k_ii == k_jj) { print(c(i, j)) }
}
}
print_k_kernels(gfs[[1]], gfs[[16], 10, "dir"])
print_k_kernels(gfs[[1]], gfs[[16]], 10, "dir")
par(mfrow = c(1, 2))
plot(gfs[[1]])
plot(gfs[[1]][[1]])
plot(gfs[[16]][[1]])
g1 <- gfs[[1]]
g2 <- gfs[[16]]
g1[[5]]
g2[[5]]
g1[[5]]
g1[[4]]
g2[[4]]
g2[[5]]
g1[[2]]
g2[[2]]
g1[[3]]
g2[[3]]
print_k_kernels(g1, g2, 10, "dir")
sort(g1) == sort(g2)
sort(g1[[5]]) == sort(g2[[5]])
sort(g1[[5]])
sort(g2[[5]])
?any
any(sort(g1[[5]]) == sort(g2[[5]]))
any(sort(g1[[5]]) != sort(g2[[5]]))
any((sort(g1[[5]]) == sort(g2[[5]])) == FALSE)
g3 <- gfs[[14]]
g4 <- gfs[[19]]
g3[[5]]
g4[[5]]
sort(g3[[5]])
sort(g4[[5]])
any((sort(g3[[5]]) == sort(g4[[5]])) = FALSE)
any((sort(g3[[5]]) == sort(g4[[5]])) == FALSE)
for (i in 1:20) {
if (i / 2 == 0) continue
else print(i) }
mod(5, 2)
5 %% 2
6 %% 3
for (i in 1:20) {
if (i %% 2 == 0) continue
else print(i) }
for (i in 1:20 {})
for (i in 1:20 {)
for (i in 1:20) {
if (i %% 2 == 0) next
else print(i)
}
rm(list = ls())
dev.off()
library(igraph)
source("graph_funcs2.R")
set.seed(2015)
gfs <- gen_seq_graphs(20, 4, "dir", 0.5)
for (i in 1:(length(gfs) - 1)) {
k_ii <- kernel1(gfs[[i]], gfs[[i]], 3, "dir")
for (j in (i + 1):length(gfs)) {
if (any((sort(gfs[[i]][[5]]) == sort(gfs[[j]][[5]])) == FALSE)) { next }
k_jj <- kernel1(gfs[[j]], gfs[[j]], 3, "dir")
if (k_ii == k_jj)
print(c(i, j))
}
}
rm(list = ls())
source("Task3.R")
rm(list = ls())
source("Task_dir.R")
source("Task_dir.R")
rm(k_ii, k_jj, count, i, j, n)
graph.isomorphic(gfs[[6]][[1]], gfs[[1074]][[1]])
par(mfrow = c(1, 2))
plot(gfs[[6]][[1]])
plot(gfs[[1074]][[1]])
print_k_kernels(gfs[[6]], gfs[[1074]], 10, "undir")
dev.off()
install.packages("gputools")
g1 <- gfs[[6]]
g2 <- gfs[[1074]]
sort(g1[[5]])
sort(g2[[5]])
sum(g1[[5]])
sum(g2[[5]])
source("Task_undir.R")
library(gputools)
install.packages("gputools")
install.packages("gputools")
source("Task_undir.R")
for (i in 1:2) {
k_ii <- kernel1(gfs[[i]], gfs[[i]], 1, "undir")
for (j in (i + 1):length(gfs)) {
if (any((sort(gfs[[i]][[5]]) == sort(gfs[[j]][[5]])) == F)) { next }
k_jj <- kernel(gfs[[j]], gfs[[j]], 1, "undir")
if (k_ii == k_jj)
print(c(i, j))
}
}
source("Task_undir.R")
g1 <- gfs[[486]]
g2 <- gfs[[1467]]
graph.isomorphic(g1[[1]], g2[[1]])
sort(g1[[5]])
sort(g2[[5]])
print_k_kernels(g1, g2, 10, "undir")
rm(list = ls())
source("Task_undir.R")
source("Task_undir.R")
source("Task_dir.R")
install.packages("gputools")
source("Task_dir.R")
source("Task_dir.R")
rm(list = ls())
source("perform_task.R")
count <- 500
n <- 20
gfs <- gen_seq_graphs(count, n, "dir", 0.5)
perform_task(gfs, "dir")
source("perform_task.R")
perform_task(gfs)
source("perform_task.R")
perform_task(gfs)
warnings()
perform_task(gfs, "dir")
rm(gfs, count, n)
gfs <- gen_seq_graphs(15, 15, 0.5)
gfs <- gen_seq_graphs(15, 15, "dir", 0.5)
gfs <- c(gfs, gfs, gfs, gfs)
perform_task(gfs, "dir")
rm(gfs)
v <- list()
v[[1]] <- c(3, 5)
v[[2]] <- c(7, 19)
v
rm(v)
v <- list()
v[[0]] <- c(5, 3)
v
v[[1]] <- c(5, 3)
v[[2]] <- c(7, 9)
dump(v, file = "sample.txt")
?dump
dump(v[[1]], file = "sample.txt")
dump(c(5, 3), file = "sample.dat")
file
?file
rm(v)
zz <- file("ex.txt", "w")
cat("TITLE EXTRA LINE", "2 3 5 7", "", "11 13 17", file = zz, sep = "\n")
cat("One more line\n", file = zz)
close(zz)
readLines("ex.txt")
unlinke("ex.txt")
unlink("ex.txt")
v <- list()
v[[1]] <- c(5, 3)
v[[2]] <- c(3, 7)
zz <- file("ex.txt", "w")
cat(v, file = zz)
cat(v, file = zz, sep = ",")
str(v)
cat(str(v), file = zz)
close(zz)
zz <- file("ex.txt", "w")
cat(str(v), file = zz, sep = "\n")
close(z)
close(zz)
rm(v, zz)
v <- list()
v[[1]] <- c(3, 5)
f <- file("ex.txt", "w")
cat(str(v[[1]], file = f, sep = "\n"))
close(f)
s <- paste(v[[1]])
s
s <- paste("(", v[[1]], ")", sep = "")
s
class(s)
s <- paste(v[[1]], sep = "")
s
s <- paste("(", v[[1]][[1]], " ", v[[1]][[2]], ")", sep = "")
s
?cat
5 %% 3
6 %% 3
source("perform_task.R")
rm(v, f, s)
gfs <- gen_seq_graphs(100, 10, "dir", 0.5)
perform_task(gfs, "dir", c("standard.txt"))
source("perform_task.R")
perform_task(gfs, "dir", c("standard.txt"))
source("perform_task.R")
perform_task(gfs, "dir", c("standard.txt"))
source("perform_task.R")
perform_task(gfs, "dir", c("standard.csv"))
v <- list()
v[[1]] <- c(1, 2)
v[[2]] <- c(3, 4)
con <- file("standard.csv", "w")
s <- paste("(", v[[1]][[1]], " ", v[[1]][[2]], ")", sep = "")
s
cat(s, file = con, sep = ",")
s <- paste("(", v[[2]][[1]], " ", v[[2]][[2]], ")", sep = "")
cat(s, file = con, sep = ",")
close(con)
source("perform_task.R")
perform_task(gfs, "dir", c("standard.csv"f))
perform_task(gfs, "dir", c("standard.csv"))
?writeLines
?serialize
?write
source("perform_task.R")
perform_task(gfs, "dir", c("standard.csv"))
source("perform_task.R")
perform_task(gfs, "dir", c("standard.csv"))
source("perform_task.R")
perform_task(gfs, "dir", c("standard.csv"))
source("perform_task.R")
perform_task(gfs, "dir", c("standard.csv"))
str(c(1, 5))
paste("(", str(3), " ", str(5), ")")
paste("(", str(3), " ", str(5), ")", sep = "")
i <- 3
j <- 5
paste("(", i, " ", j, ")", sep = "")
source("perform_task.R")
perform_task(gfs, "dir", c("text"))
source("perform_task.R")
perform_task(gfs, "dir", c("text"))
